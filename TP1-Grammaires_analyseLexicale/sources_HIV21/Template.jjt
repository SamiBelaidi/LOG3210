options {
	JAVA_UNICODE_ESCAPE=true;
	STATIC=false;					// 1 seul parseur actif a la fois (+ rapide)
	MULTI=true;						// type noeud = f(nom noeud)
	VISITOR=true;					// Cree une methode accept(visiteur)
}

//
// PARSER DEFINITION
//

PARSER_BEGIN(Parser)

package analyzer.ast;

public class Parser
{
	public static ASTProgram ParseTree(java.io.InputStream input) throws ParseException
	{
		Parser c = new Parser(input);
		return c.Program();
	}
}

PARSER_END(Parser)

//
// LEXICAL ANALYSIS
//

// White space

SKIP :
{
	< ( " " | "\t" | "\n" | "\r" )+	>
}

// Comments

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}




// Keywords
TOKEN :
{
	< IF: "if"	> |
	< ELSE: "else" > |
	< STRING: "string"> |
	< INT: "int"> |
	< FLOAT: "float" > |
	< BOOL: "bool" | "boolean"> |
	< PRINT: "print" > |
	< INPUT: "input" > |
	< IN: "in" > |
	// À compléter au besoin
	< CLASS: "class" > |
	< VOID: "void"> |
	< CHAR: "char">
}

// Operators
TOKEN :
{
	< ASSIGN: < EQUAL >  > |
	< COMPARE: < LESS > | < LESSEQUAL > | < GREAT > | <GREATEQUAL > | < DIFF > | < EQUALEQUAL > > |
    < LOGIC: < AND > | < OR > > |
	< #LESS: "<" > |
	< #LESSEQUAL: "<=" > |
	< #GREAT: ">" > |
	< #GREATEQUAL: ">=" > |
	< #DIFF: "!=" > |
	< #EQUALEQUAL: "==" > |

	< PLUS: "+" > |
	< MINUS: "-" > |
	< FOIS: "*" > |
	< DIV: "/" > |
    < NOT: "!" > |

	< #EQUAL: "=" > |
	< LACC: "{" > |
	< RACC: "}" > |
	< COLON: ":" > |
	< SEMICOLON: ";" > |
	< COMMA: "," > |
	< #AND: "&&" > |
	< #OR: "||" > |
	// À compléter au besoin
	< LPAR : "(" > |
	< RPAR : ")" > |
	< APP: "\'" >
}


// Identifiers and numbers
TOKEN :
{
	< IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > |
	< #LETTER: ["a"-"z","A"-"Z","_"] > |
	< #DIGIT: ["0"-"9"] > |
	< INTEGER: ["1"-"9"] (["0"-"9"])* | "0" > |
	< #EXP : ("e" | "E") (<PLUS>|<MINUS>)?>|
	// // Caution! Allows numbers such as "0000.23"
	< REAL: (<INTEGER>)? "." (<DIGIT>)* (<EXP> <INTEGER>)? >

}







//
// SYNTAX ANALYSIS
//

ASTProgram Program() : { }
{
	Block() <EOF> { return jjtThis;  }
}

void Block() : { }
{
	( Stmt() | ClassDeclaration() | TypeDeclaration() )*
}

void Stmt() : { }
{
	IfStmt() | AssignStmt() <SEMICOLON>
}

void AssignStmt() : { Token t;}
{
	Identifier() [<ASSIGN> Expr()]
}

//CLASS
void ClassDeclaration() : {}
{
    <CLASS> Identifier() <LACC> Block() <RACC>
}

void TypeDeclaration() : {}
{
	(<INT> | <FLOAT> | <BOOL> | <CHAR>) BasicDeclaration() |
    (<VOID> MethodDeclaration())
}

void BasicDeclaration() #void : {}
{
    LOOKAHEAD(Identifier() <LPAR>) MethodDeclaration() |
    (AttributDeclaration() <SEMICOLON>)
}

void TypeInitializationParameter() : {}
{
	(<INT> | <FLOAT> | <BOOL> | <CHAR>) AssignStmt()
}

void AttributDeclaration() : {}
{
    AssignStmt() (<COMMA> AssignStmt())*
}

void MethodDeclaration() : {}
{ // id(Type param) { block() }
    Identifier() <LPAR> [TypeInitializationParameter() (<COMMA> TypeInitializationParameter())*] <RPAR> <LACC> Block() <RACC>
}

// OPERATION
void BasicExpr() : {}
{
    LOOKAHEAD(2) Identifier() | IntValue() | RealValue() | StringValue()
}

void Expr() : {}
{
    LogicExpr()
}

void ParExpr() : {}
{
    <LPAR> Expr() <RPAR> | BasicExpr()
}

void NotExpr() :{}
{
    (<NOT>)* ParExpr()
}

void NegExpr() :{}
{
    (<MINUS>)* NotExpr()
}

void MulExpr() : {}
{
    NegExpr() ((<FOIS> | <DIV>) NegExpr())*
}

void AddExpr() : {}
{
    MulExpr() ((<PLUS> | <MINUS>) MulExpr())*
}

void BoolExpr(): {}
{
    AddExpr() (<COMPARE> AddExpr())*
}

void LogicExpr() :{}
{
    BoolExpr() (<LOGIC> BoolExpr())*
}

//IF ESLE
void IfStmt() : {}
{
     <IF> <LPAR> Expr() <RPAR>
            BlockWithAcc()
            (LOOKAHEAD(1) <ELSE> BlockWithAcc())?
}

void BlockWithAcc() #void : {}
{
    ((<LACC> (Stmt())* <RACC>) | (Stmt()))
}

// DEFAULT
void Identifier() : { Token t;}
{
	t = <IDENTIFIER> {jjtThis.setValue(t.image);}
}

void IntValue() : { Token t;}
{
	t = <INTEGER> {jjtThis.setValue(Integer.parseInt(t.image));}
}

void RealValue() : { Token t;}
{
	t = <REAL> {jjtThis.setValue(Double.parseDouble(t.image));}
}

void StringValue() : {}
{
	<APP> Identifier() <APP>
}